; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\usart3.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\usart3.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\HARDWARE\LED -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\STM32F10x_FWLib\inc -I..\CORE -I..\HARDWARE\SPI -I..\HARDWARE\MMC_SD -I..\HARDWARE\SPI -I..\HARDWARE\LED -I..\HARDWARE\WNOTEPAD -I..\HARDWARE\RTC -I..\FATFS -I..\FATFS\option -I..\HARDWARE\USART3 -I..\APPS -I..\HARDWARE\OV2640 -I..\HARDWARE\24LC1024 -I..\HARDWARE\RAM -I.\RTE\_Target_1 -ID:\EmbeddedTools\MDK51_RAM\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\EmbeddedTools\MDK51_RAM\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\usart3.crf ..\HARDWARE\USART3\USART3.c]
                          THUMB

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;92     
;;;93     void USART3_IRQHandler(void)                	//串口3中断服务程序
000000  b570              PUSH     {r4-r6,lr}
;;;94     {
;;;95         uint8_t USART3_Res;
;;;96     
;;;97         if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) { //接收中断(接收到的数据必须是0x0d 0x0a结尾)
000002  4c16              LDR      r4,|L1.92|
000004  f2405125          MOV      r1,#0x525
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L1.48|
;;;98             USART3_Res =USART_ReceiveData(USART3);//(USART1->DR);	//读取接收到的数据
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       USART_ReceiveData
;;;99     
;;;100            if((USART3_RX_STA&0x8000)==0) { //接收未完成
000018  4a11              LDR      r2,|L1.96|
00001a  b2c1              UXTB     r1,r0                 ;98
00001c  8810              LDRH     r0,[r2,#0]  ; USART3_RX_STA
00001e  0403              LSLS     r3,r0,#16
000020  d406              BMI      |L1.48|
;;;101                if(USART3_RX_STA&0x4000) { //接收到了0x0d
000022  0444              LSLS     r4,r0,#17
000024  f04f0300          MOV      r3,#0
000028  d506              BPL      |L1.56|
;;;102                    if(USART3_Res!=0x0a)
00002a  290a              CMP      r1,#0xa
00002c  d001              BEQ      |L1.50|
                  |L1.46|
;;;103                        USART3_RX_STA=0;//接收错误,重新开始
00002e  8013              STRH     r3,[r2,#0]
                  |L1.48|
;;;104                    else
;;;105                        USART3_RX_STA|=0x8000;	//接收完成了
;;;106                } else { //还没收到0X0D
;;;107                    if(USART3_Res==0x0d)
;;;108                        USART3_RX_STA|=0x4000;
;;;109                    else {
;;;110                        USART3_RX_BUF[USART3_RX_STA&0X3FFF]=USART3_Res ;
;;;111                        USART3_RX_STA++;
;;;112                        if(USART3_RX_STA>USART3_RX_LEN)
;;;113                            USART3_RX_STA=0;//接收数据错误,重新开始接收
;;;114                    }
;;;115                }
;;;116            }
;;;117        }
;;;118    }
000030  bd70              POP      {r4-r6,pc}
                  |L1.50|
000032  f4404000          ORR      r0,r0,#0x8000         ;105
000036  e00e              B        |L1.86|
                  |L1.56|
000038  290d              CMP      r1,#0xd               ;107
00003a  d00a              BEQ      |L1.82|
00003c  f3c0040d          UBFX     r4,r0,#0,#14          ;110
000040  4d08              LDR      r5,|L1.100|
000042  1c40              ADDS     r0,r0,#1              ;110
000044  b280              UXTH     r0,r0                 ;111
000046  5529              STRB     r1,[r5,r4]            ;110
000048  8010              STRH     r0,[r2,#0]            ;111
00004a  f5b06f00          CMP      r0,#0x800             ;112
00004e  d8ee              BHI      |L1.46|
000050  bd70              POP      {r4-r6,pc}
                  |L1.82|
000052  f4404080          ORR      r0,r0,#0x4000         ;108
                  |L1.86|
000056  8010              STRH     r0,[r2,#0]            ;105
000058  bd70              POP      {r4-r6,pc}
;;;119    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
                          DCD      0x40004800
                  |L1.96|
                          DCD      ||.data||
                  |L1.100|
                          DCD      ||.bss||

                          AREA ||i.crc16||, CODE, READONLY, ALIGN=2

                  crc16 PROC
;;;119    
;;;120    uint16_t crc16(char* puchMsg,uint8_t usDataLen)
000000  b570              PUSH     {r4-r6,lr}
;;;121    {
;;;122        char uchCRCHi = 0xFF;
;;;123        char uchCRCLo = 0xFF;
;;;124        uint16_t  uIndex;
;;;125    
;;;126        while (usDataLen--) {
;;;127            uIndex = uchCRCHi ^ *puchMsg++;
;;;128            uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
000002  4d09              LDR      r5,|L2.40|
000004  22ff              MOVS     r2,#0xff              ;122
000006  4613              MOV      r3,r2                 ;123
;;;129            uchCRCLo = auchCRCLo[uIndex] ;
000008  f5057680          ADD      r6,r5,#0x100
00000c  e005              B        |L2.26|
                  |L2.14|
00000e  f8104b01          LDRB     r4,[r0],#1            ;127
000012  4054              EORS     r4,r4,r2              ;127
000014  5d2a              LDRB     r2,[r5,r4]            ;128
000016  405a              EORS     r2,r2,r3              ;128
000018  5d33              LDRB     r3,[r6,r4]
                  |L2.26|
00001a  1e49              SUBS     r1,r1,#1              ;126
00001c  b2c9              UXTB     r1,r1                 ;126
00001e  d2f6              BCS      |L2.14|
;;;130        }
;;;131        return (((u16)(uchCRCHi) << 8) | uchCRCLo) ;
000020  ea432002          ORR      r0,r3,r2,LSL #8
;;;132    }
000024  bd70              POP      {r4-r6,pc}
;;;133    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      ||.constdata||

                          AREA ||i.uart3_init||, CODE, READONLY, ALIGN=2

                  uart3_init PROC
;;;51     
;;;52     void uart3_init(u32 bound)
000000  b570              PUSH     {r4-r6,lr}
;;;53     {
000002  4605              MOV      r5,r0
000004  b086              SUB      sp,sp,#0x18
;;;54         //GPIO端口设置
;;;55         GPIO_InitTypeDef GPIO_InitStructure;
;;;56         USART_InitTypeDef USART_InitStructure;
;;;57         NVIC_InitTypeDef NVIC_InitStructure;
;;;58     
;;;59         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
000006  2101              MOVS     r1,#1
000008  2008              MOVS     r0,#8
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;60         RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
00000e  2101              MOVS     r1,#1
000010  0488              LSLS     r0,r1,#18
000012  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;61         RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
000016  2101              MOVS     r1,#1
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;62         //USART1_TX   PB.10
;;;63         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00001e  f44f6080          MOV      r0,#0x400
000022  f8ad0010          STRH     r0,[sp,#0x10]
;;;64         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000026  2403              MOVS     r4,#3
000028  f88d4012          STRB     r4,[sp,#0x12]
;;;65         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00002c  2018              MOVS     r0,#0x18
;;;66         GPIO_Init(GPIOB, &GPIO_InitStructure);
00002e  4e1e              LDR      r6,|L3.168|
000030  f88d0013          STRB     r0,[sp,#0x13]         ;65
000034  a904              ADD      r1,sp,#0x10
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       GPIO_Init
;;;67         //USART1_RX	PB.11
;;;68         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
00003c  14f0              ASRS     r0,r6,#19
00003e  f8ad0010          STRH     r0,[sp,#0x10]
;;;69         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000042  2004              MOVS     r0,#4
000044  f88d0013          STRB     r0,[sp,#0x13]
;;;70         GPIO_Init(GPIOB, &GPIO_InitStructure);
000048  a904              ADD      r1,sp,#0x10
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       GPIO_Init
;;;71         //Usart2 NVIC 配置
;;;72     
;;;73         NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000050  2027              MOVS     r0,#0x27
000052  f88d0014          STRB     r0,[sp,#0x14]
;;;74         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;
000056  f88d4015          STRB     r4,[sp,#0x15]
;;;75         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;		//
00005a  2101              MOVS     r1,#1
00005c  f88d1016          STRB     r1,[sp,#0x16]
;;;76         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
000060  f88d1017          STRB     r1,[sp,#0x17]
;;;77         NVIC_Init(&NVIC_InitStructure);	//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器USART1
000064  a805              ADD      r0,sp,#0x14
000066  f7fffffe          BL       NVIC_Init
;;;78     
;;;79         //USART 初始化设置
;;;80     
;;;81         USART_InitStructure.USART_BaudRate = bound;//波特率设置;
;;;82         USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00006a  2000              MOVS     r0,#0
00006c  f8ad0004          STRH     r0,[sp,#4]
;;;83         USART_InitStructure.USART_StopBits = USART_StopBits_1;
000070  f8ad0006          STRH     r0,[sp,#6]
;;;84         USART_InitStructure.USART_Parity = USART_Parity_No;
000074  f8ad0008          STRH     r0,[sp,#8]
;;;85         USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000078  f8ad000c          STRH     r0,[sp,#0xc]
;;;86         USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00007c  200c              MOVS     r0,#0xc
;;;87         USART_Init(USART3, &USART_InitStructure);
00007e  4c0b              LDR      r4,|L3.172|
000080  f8ad000a          STRH     r0,[sp,#0xa]          ;86
000084  9500              STR      r5,[sp,#0]            ;82
000086  4669              MOV      r1,sp
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       USART_Init
;;;88     
;;;89         USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);//开启中断
00008e  2201              MOVS     r2,#1
000090  f2405125          MOV      r1,#0x525
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       USART_ITConfig
;;;90         USART_Cmd(USART3, ENABLE);                    //使能串口
00009a  2101              MOVS     r1,#1
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       USART_Cmd
;;;91     }
0000a2  b006              ADD      sp,sp,#0x18
0000a4  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP

0000a6  0000              DCW      0x0000
                  |L3.168|
                          DCD      0x40010c00
                  |L3.172|
                          DCD      0x40004800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USART3_RX_BUF
                          %        2048

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  auchCRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  auchCRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40

                          AREA ||.data||, DATA, ALIGN=1

                  USART3_RX_STA
000000  0000              DCW      0x0000
