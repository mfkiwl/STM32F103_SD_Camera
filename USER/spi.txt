; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\spi.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\spi.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\HARDWARE\LED -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\STM32F10x_FWLib\inc -I..\CORE -I..\HARDWARE\SPI -I..\HARDWARE\MMC_SD -I..\HARDWARE\SPI -I..\HARDWARE\LED -I..\HARDWARE\WNOTEPAD -I..\HARDWARE\RTC -I..\FATFS -I..\FATFS\option -I..\HARDWARE\USART3 -I..\APPS -I..\HARDWARE\OV2640 -I..\HARDWARE\24LC1024 -I..\HARDWARE\RAM -I.\RTE\_Target_1 -ID:\EmbeddedTools\MDK51_RAM\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\EmbeddedTools\MDK51_RAM\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\spi.crf ..\HARDWARE\SPI\spi.c]
                          THUMB

                          AREA ||i.SPIx_Init||, CODE, READONLY, ALIGN=2

                  SPIx_Init PROC
;;;7      SPI_InitTypeDef  SPI_InitStructure;
;;;8      void SPIx_Init(void) {
000000  b538              PUSH     {r3-r5,lr}
;;;9          GPIO_InitTypeDef GPIO_InitStructure;
;;;10     
;;;11         RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOA|RCC_APB2Periph_SPI1, ENABLE );
000002  2101              MOVS     r1,#1
000004  f2410004          MOV      r0,#0x1004
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;12     
;;;13         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
00000c  20e0              MOVS     r0,#0xe0
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;14         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  //复用推挽输出
000012  2018              MOVS     r0,#0x18
000014  f88d0003          STRB     r0,[sp,#3]
;;;15         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
;;;16         GPIO_Init(GPIOA, &GPIO_InitStructure);
00001a  4c15              LDR      r4,|L1.112|
00001c  f88d0002          STRB     r0,[sp,#2]            ;15
000020  4669              MOV      r1,sp
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       GPIO_Init
;;;17     
;;;18         GPIO_SetBits(GPIOA,GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7);
000028  21e0              MOVS     r1,#0xe0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       GPIO_SetBits
;;;19     
;;;20         SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  //设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工
000030  4810              LDR      r0,|L1.116|
000032  2100              MOVS     r1,#0
;;;21         SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		//设置SPI工作模式:设置为主SPI
000034  f44f7282          MOV      r2,#0x104
000038  8001              STRH     r1,[r0,#0]            ;20
00003a  8042              STRH     r2,[r0,#2]
;;;22         SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;		//设置SPI的数据大小:SPI发送接收8位帧结构
00003c  8081              STRH     r1,[r0,#4]
;;;23         SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;		//选择了串行时钟的稳态:时钟悬空高
00003e  2202              MOVS     r2,#2
000040  80c2              STRH     r2,[r0,#6]
;;;24         SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;	//数据捕获于第二个时钟沿
000042  2201              MOVS     r2,#1
000044  8102              STRH     r2,[r0,#8]
;;;25         SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;		//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制
000046  0252              LSLS     r2,r2,#9
000048  8142              STRH     r2,[r0,#0xa]
;;;26         SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;		//定义波特率预分频的值:波特率预分频值为256
00004a  2238              MOVS     r2,#0x38
00004c  8182              STRH     r2,[r0,#0xc]
;;;27         SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始
00004e  81c1              STRH     r1,[r0,#0xe]
;;;28         SPI_InitStructure.SPI_CRCPolynomial = 7;	//CRC值计算的多项式
000050  2107              MOVS     r1,#7
000052  8201              STRH     r1,[r0,#0x10]
;;;29         SPI_Init(SPI1, &SPI_InitStructure);  //根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器
000054  4c08              LDR      r4,|L1.120|
000056  4601              MOV      r1,r0
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       SPI_Init
;;;30     
;;;31         SPI_Cmd(SPI1, ENABLE); //使能SPI外设
00005e  2101              MOVS     r1,#1
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       SPI_Cmd
;;;32     
;;;33         SPIx_ReadWriteByte(0xff);//启动传输
000066  20ff              MOVS     r0,#0xff
000068  f7fffffe          BL       SPIx_ReadWriteByte
;;;34     }
00006c  bd38              POP      {r3-r5,pc}
;;;35     //SPI 速度设置函数
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      0x40010800
                  |L1.116|
                          DCD      ||.bss||
                  |L1.120|
                          DCD      0x40013000

                          AREA ||i.SPIx_ReadWriteByte||, CODE, READONLY, ALIGN=2

                  SPIx_ReadWriteByte PROC
;;;50     //返回值:读取到的字节
;;;51     u8 SPIx_ReadWriteByte(u8 TxData) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;52         u8 retry=0;
000004  2400              MOVS     r4,#0
;;;53         while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) { //检查指定的SPI标志位设置与否:发送缓存空标志位
000006  4d10              LDR      r5,|L2.72|
000008  e003              B        |L2.18|
                  |L2.10|
00000a  1c64              ADDS     r4,r4,#1              ;51
;;;54             retry++;
00000c  b2e4              UXTB     r4,r4
;;;55             if(retry>200)return 0;
00000e  2cc8              CMP      r4,#0xc8
000010  d813              BHI      |L2.58|
                  |L2.18|
000012  2102              MOVS     r1,#2                 ;53
000014  4628              MOV      r0,r5                 ;53
000016  f7fffffe          BL       SPI_I2S_GetFlagStatus
00001a  2800              CMP      r0,#0                 ;53
00001c  d0f5              BEQ      |L2.10|
;;;56         }
;;;57     
;;;58         SPI_I2S_SendData(SPI1, TxData); //通过外设SPIx发送一个数据
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       SPI_I2S_SendData
;;;59         retry=0;
000026  2400              MOVS     r4,#0
                  |L2.40|
;;;60         while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); //检查指定的SPI标志位设置与否:接受缓存非空标志位
000028  2101              MOVS     r1,#1
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       SPI_I2S_GetFlagStatus
000030  2800              CMP      r0,#0
000032  d0f9              BEQ      |L2.40|
000034  1c64              ADDS     r4,r4,#1
;;;61         {
;;;62             retry++;
;;;63             if(retry>200)return 0;
000036  2cc8              CMP      r4,#0xc8
000038  d901              BLS      |L2.62|
                  |L2.58|
00003a  2000              MOVS     r0,#0
;;;64         }
;;;65         return SPI_I2S_ReceiveData(SPI1); //返回通过SPIx最近接收的数据
;;;66     }
00003c  bd70              POP      {r4-r6,pc}
                  |L2.62|
00003e  4628              MOV      r0,r5                 ;65
000040  f7fffffe          BL       SPI_I2S_ReceiveData
000044  b2c0              UXTB     r0,r0                 ;65
000046  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

                  |L2.72|
                          DCD      0x40013000

                          AREA ||i.SPIx_SetSpeed||, CODE, READONLY, ALIGN=2

                  SPIx_SetSpeed PROC
;;;41     
;;;42     void SPIx_SetSpeed(u8 SpeedSet) {
000000  b510              PUSH     {r4,lr}
;;;43         SPI_InitStructure.SPI_BaudRatePrescaler = SpeedSet ;
000002  4906              LDR      r1,|L3.28|
;;;44         SPI_Init(SPI1, &SPI_InitStructure);
000004  4c06              LDR      r4,|L3.32|
000006  8188              STRH     r0,[r1,#0xc]          ;43
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPI_Init
;;;45         SPI_Cmd(SPI1,ENABLE);
00000e  4620              MOV      r0,r4
000010  e8bd4010          POP      {r4,lr}
000014  2101              MOVS     r1,#1
000016  f7ffbffe          B.W      SPI_Cmd
;;;46     }
;;;47     
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      ||.bss||
                  |L3.32|
                          DCD      0x40013000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  SPI_InitStructure
                          %        18
